# This script creates the mapping used for grid to census tract mapping
# It is assumed that output_dir already exists
# The map data required is the Union subarea file generated by the GIS scripts
# There are certain lines of code that are unnecessary but have been kept for troubleshooting if needed
# down the road.

import pickle

output_dir = "..\\output\\"
map_dir = "..\\map_data\\"
combo_fname = "Combinations_Union.csv" 
tract_fname = "Tracts.csv"
map_fname = output_dir + "G2C_Map.pickle"
unmatched_fname = output_dir + "umatch_all.txt"

Combofile = map_dir + combo_fname
Tractsfile = output_dir + tract_fname

cdict = {}

cfile = open(Combofile, "r"); 
umatch = open(unmatched_fname, "w")
umatchset = set()
line = cfile.readline()

cfields = []
for line in cfile:
    
    
    cleanline = line.strip()
    cfields = cleanline.split(",") 
    
    if cfields[0]:        # Line contains GEOID
        if cfields[5]:    # Line contains an i, j identification
            currkey = int(cfields[0])
            if currkey in cdict:     
                cdict[currkey].append([(int(cfields[5]),int(cfields[6])), float(cfields[2])])

            else:
                cdict[currkey] = [None, [], [], [], [(int(cfields[5]),int(cfields[6])), float(cfields[2])]]
        else:
            umatchset.add(int(cfields[0]))

# Output unmatched GEOID's (no corresponding GP areas)


print("*****ID's with missing i,j lines*****\n", file=umatch)
print(umatchset, file=umatch)
copy_umatchset = umatchset.copy()

for uid in copy_umatchset:
    if uid in cdict:
        umatchset.remove(uid)
    
print("******ID's actually missing from cdict*****\n", file=umatch)
print(umatchset, file=umatch)
cfile.close()
umatch.close()


mapfile = open(map_fname, "wb")
pickle.dump(cdict, mapfile, 2);
mapfile.close()






